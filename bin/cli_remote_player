#!/usr/bin/env python3

import sys
import os
import re
import asyncio
import importlib
import pyperclip

rootdir = os.path.abspath(os.path.join(os.path.dirname(__file__), os.pardir))
sys.path.append(rootdir)

from robotjes.client import async_rest_client
import robotjes
from robotjes import client, Timer


class PlayerClient:
    def __init__(self):
        pass

    def create_robo(self, game_tick, robo_id):
        print(f"create_robo[{game_tick}][{robo_id}]")
        # pass

    def done_robo(self, game_tick, robo_id):
        print(f"done_robo[{game_tick}][{robo_id}]")
        # pass

    def robo_status(self, game_tick, robo_id, robo_status):
        # print(f"robo_status[{game_tick}][{robo_id}][{robo_status}]")
        pass

    def issue_command(self, game_tick, robo_id, cmd, reply):
        print(f"issue_command[{game_tick}][{robo_id}][{cmd}]->[{reply}]")
        # pass


def load_client(module_name):
    # load user module that should contain a function like: def execute(robo)
    execute_entrypoint = None
    try:
        module = importlib.import_module(module_name)
        if hasattr(module, 'execute'):
            execute_entrypoint = module.execute
    except Exception as e:
        print(f"failure to load user module: {str(e)}")
        exit(1)
    return execute_entrypoint

rest_client = None
player = None


async def timer():
    global player, rest_client
    if player and rest_client and robotjes.debug_mode:
        await rest_client.timer_tick()
    if player:
        await player.timer()


async def run(args, rclient, uuid, game_id, player_id):
    global player, rest_client
    rest_client = rclient
    script = load_client(args.module)
    clnt = PlayerClient()
    handler = client.RemoteEngineHandler(rest_client, uuid, game_id, player_id)
    player = client.Player(handler, clnt)

    global_timer = Timer(0.1, timer, True)

    f1 = asyncio.create_task(player.run_one_robo(script))
    await asyncio.wait([f1])
    await player.stop()
    player = None
    global_timer.cancel()


async def main(args):
    # create connection to the server
    # rest_client = client.RestClient(loop, args.url)
    rest_client = async_rest_client.AsyncRestClient(args.url, debug=True)
    login_reply = await rest_client.login(args.username, args.password)

    # get and confirm a and run
    uuid = await rest_client.request_field_uuid()
    confirm = await rest_client.confirm_field_uuid(uuid)
    player_id = confirm['player_id']
    game_id = confirm['game_id']
    await run(args, rest_client, uuid, game_id, player_id)


if __name__ == "__main__":
    # get commandline arguments
    import argparse
    parser = argparse.ArgumentParser(description='CommandLineInterface (CLI) for Player')
    parser.add_argument('--url', type=str, default='https://localhost:8888', help='url of robomind academy')
    parser.add_argument('--username', type=str, default='some@one.com', help='username')
    parser.add_argument('--password', type=str, default='secret', help='password')
    parser.add_argument('-d', '--debug', action='store_true', help="Allows debugging of client code.")
    parser.add_argument('--module', type=str, default="sample.player.player102", help='module containing the player logic')

    # parser.add_argument('--url', type=str, default='https://localhost:8888', help='url of robomind academy')
    # parser.add_argument('--url', type=str, default='http://localhost:8765', help='url of the robotjes REST entrypoint')
    # parser.add_argument('--player', type=str, default="me", help='name or id of the umpire')
    # parser.add_argument('--name', type=str, default="eat_three", help='name of the game to join')
    # parser.add_argument('--password', type=str, default="secret1", help='password needed to enter the game')
    # parser.add_argument('--uuid', default=None, help='pre-registration uuid')
    # parser.add_argument('-d', '--debug', action='store_true', help="Allows debugging of client code.")

    cmd_args = parser.parse_args()
    if cmd_args.debug:
        robotjes.debug_mode = True

    # run the main function
    asyncio.run(main(cmd_args))

    # old loop-based async
    # aloop = asyncio.get_event_loop()
    # aloop.run_until_complete(main(cmd_args, aloop))
    # aloop.close()
