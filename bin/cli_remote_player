#!/usr/bin/env python3

import sys
import os
import re
import argparse
import asyncio
import importlib
import pyperclip

rootdir = os.path.abspath(os.path.join(os.path.dirname(__file__), os.pardir))
sys.path.append(rootdir)

from robotjes import client, Timer


class PlayerClient:
    def __init__(self):
        pass

    def robo_status(self, game_tick, robo_id, robo_status):
        # print(f"status[{robo_status}]")
        pass

    def issue_command(self, game_tick, robo_id, cmd, reply):
        # print(f"cmd[{game_tick}]")
        pass


def load_client(module_name):
    # load user module that should contain a function like: def execute(robo)
    execute_entrypoint = None
    try:
        module = importlib.import_module(module_name)
        if hasattr(module, 'execute'):
            execute_entrypoint = module.execute
    except Exception as e:
        print(f"failure to load user module: {str(e)}")
        exit(1)
    return execute_entrypoint


async def run(args, uuid, loop):
    script = load_client(args.module)
    clnt = PlayerClient()
    rest_client = client.RestClient(loop, args.url)
    handler = client.RemoteEngineHandler(rest_client, args.player, args.name, args.password, uuid)
    player = client.Player(handler, loop, clnt)
    timer = Timer(0.1, player.timer, True)
    f1 = loop.create_task(player.run_one_robo(script))
    f2 = loop.create_task(player.run_runtime())
    await asyncio.wait([f1, f2])
    timer.cancel()


def uuid_from_clipboard():
    clpb = pyperclip.paste()
    if clpb and re.match("^[0-9a-z]{8}-[0-9a-z]{4}-[0-9a-z]{4}-[0-9a-z]{4}-[0-9a-z]{12}$", clpb):
        return clpb
    else:
        return None


async def main(args, loop):
    if args.uuid:
        # run one time using the uuid passed via the arguments
        await run(args, args.uuid, loop)
    else:
        # loop waiting for a UUID in the clipboard
        while True:
            await asyncio.sleep(1)
            uuid = uuid_from_clipboard()
            if uuid:
                await run(args, uuid, loop)


if __name__ == "__main__":
    # get commandline arguments
    parser = argparse.ArgumentParser(description='CommandLineInterface (CLI) for Player')
    parser.add_argument('--url', type=str, default='http://localhost:8765', help='url of the robotjes REST entrypoint')
    parser.add_argument('--player', type=str, default="me", help='name or id of the umpire')
    parser.add_argument('--name', type=str, default="eat_three", help='name of the game to join')
    parser.add_argument('--password', type=str, default="secret1", help='password needed to enter the game')
    parser.add_argument('--module', type=str, default="sample.player.player102", help='module containing the player logic')
    parser.add_argument('--uuid', default=None, help='pre-registration uuid')
    cmd_args = parser.parse_args()

    aloop = asyncio.get_event_loop()
    aloop.run_until_complete(main(cmd_args, aloop))
    aloop.close()
