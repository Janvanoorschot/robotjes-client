#!/usr/bin/env python3
# Engine to be used while developing a Python Robotjes Solution.

import sys
import os
import logging.config
rootdir = os.path.abspath(os.path.join(os.path.dirname(__file__), os.pardir))
sys.path.append(rootdir)
os.chdir(rootdir)

from robotjes.sim import Mazes
from robotjes.server import StatusKeeper
from robotjes.server import RobotjesEngine
import robotjes.server as server
from robotjes.server.model import GameSpec

# initialise the roborest module
import fastapi
from fastapi.staticfiles import StaticFiles


def main(args: map):
    idle_spec = GameSpec(umpire_id="", game_name=args.name, game_password=args.password, maze_id=args.maze)
    server.mazes = Mazes(os.path.join(rootdir, "sample/mazes"))
    server.status_keeper = StatusKeeper()
    server.robotjes_engine = RobotjesEngine(server.status_keeper, server.mazes, idle_spec)
    server.app = fastapi.FastAPI()

    # import the files with REST calls (do not remove!!!)
    import robotjes.server.local_sys_rest
    import robotjes.server.local_bubble_hub_rest
    import robotjes.server.local_game_rest

    # start the server immediately
    # Starting already done by field: server.robotjes_engine.start_game()

    # start the webserver (note the logging configuration)
    import uvicorn
    server.app.mount("/", StaticFiles(directory=os.path.join(rootdir, "www")), name="www")
    uvicorn.run(server.app, host=args.host, port=args.port, log_config=args.logconf)


if __name__ == "__main__":
    # get commandline arguments
    import argparse
    parser = argparse.ArgumentParser(description='Execute a Robomind Academy Python script.')
    parser.add_argument('--logconf', type=str, default=os.path.join(rootdir, "bin/log.conf"), help='port')
    parser.add_argument('--host', type=str, default='0.0.0.0', help='host')
    parser.add_argument('--port', type=int, default=8765, help='port')
    parser.add_argument('--name', type=str, default="eat_three", help='name of the game to join')
    parser.add_argument('--password', type=str, default="secret1", help='password needed to enter the game')
    parser.add_argument('--maze', type=str, default="default", help='name of the maze to use')
    input_args = parser.parse_args()
    # init logging
    logging.config.fileConfig(input_args.logconf)
    logger = logging.getLogger(__name__)
    logger.warning("starting logger")
    main(input_args)
