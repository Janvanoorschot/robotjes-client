#!/usr/bin/env python3
# Engine to be used while developing a Python Robotjes Solution.

import sys
import os
rootdir = os.path.abspath(os.path.join(os.path.dirname(__file__), os.pardir))
sys.path.append(rootdir)

import robotjessrv.server.roborest as roborest
import robotjessrv.server.monitor as monitor
# initialise
roborest.pikaurl = args.pikaurl

monitor.mon = monitor.async_monitor_client.AsyncMonitorClient(args.monitorexchange)

from robotjessrv.server.roborest import StatusKeeper

roborest.status_keeper = StatusKeeper()


def listener(routing_key, request):
    roborest.status_keeper.game_status_event(request)

# initialise the roborest module
import fastapi

from robotjessrv.server.roborest.async_rpc_client import AsyncRPCClient
roborest.async_rpc_client = AsyncRPCClient(args.bubblehubsexchange, args.bubblehubsqueue)

from robotjessrv.server.roborest.async_topic_listener import AsyncTopicListener
roborest.async_topic_listener = AsyncTopicListener(args.gamesexchange, "*.status", listener)
roborest.app = fastapi.FastAPI()

# import the files with REST calls (do not remove!!!)
import robotjessrv.server.roborest.sys_rest
import robotjessrv.server.roborest.bubble_hub_rest
import robotjessrv.server.roborest.game_rest


# do static files support
from fastapi.staticfiles import StaticFiles
roborest.app.mount("/", StaticFiles(directory=os.path.join(rootdir, "www")), name="www")

# start the webserver (note the logging configuration)
import uvicorn
uvicorn.run(roborest.app, host=args.host, port=args.port, log_config=args.logconf)

if __name__ == "__main__":
    # get commandline arguments
    import argparse
    parser = argparse.ArgumentParser(description='Execute a Robomind Academy Python script.')
    parser.add_argument('--logconf', type=str, default=config.LOG_CONFIG_FILE, help='port')
    parser.add_argument('--host', type=str, default='0.0.0.0', help='host')
    parser.add_argument('--port', type=int, default=8765, help='port')
    parser.add_argument('--maze', type=str, default="default", help='name of the maze to use')
    args = parser.parse_args()
